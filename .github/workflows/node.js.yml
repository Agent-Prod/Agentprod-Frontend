name: Production CI/CD

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: [self-hosted, Linux, X64, production]
    env:
      NEXT_PUBLIC_APOLLO_API_KEY: ${{ secrets.APOLLO_API_KEY }}
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      NEXT_PUBLIC_LOCAL_SERVER: ${{ secrets.NEXT_PUBLIC_LOCAL_SERVER }}
      NEXT_PUBLIC_RAZORPAY_API_KEY: ${{ secrets.NEXT_PUBLIC_RAZORPAY_API_KEY }}
      NEXT_PUBLIC_SERVER_URL: ${{ secrets.NEXT_PUBLIC_SERVER_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      RAZORPAY_API_SECRET_KEY: ${{ secrets.RAZORPAY_API_SECRET_KEY }}
      NEXT_PUBLIC_PROD_URL: ${{ secrets.NEXT_PUBLIC_PROD_URL }}

    steps:
      - uses: actions/checkout@v3
        with:
          clean: true

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build the app
        if: success()
        run: npm run build

      - name: Deploy and reload PM2
        if: success()
        run: |
          # Store the current version's process IDs
          OLD_PIDS=$(pm2 pid prod-app 2>/dev/null)

          # Check if PM2 process exists
          if pm2 show prod-app > /dev/null 2>&1; then
            echo "Existing deployment found, performing zero-downtime reload"
            # Reload with zero downtime
            pm2 reload prod-app --update-env --wait-ready --listen-timeout 8000
          else
            echo "No existing deployment found, starting new cluster"
            # Start in cluster mode with max instances
            pm2 start npm --name "prod-app" -i max --wait-ready --listen-timeout 8000 -- start
          fi

          # Wait for new instances to stabilize
          sleep 5

          # Perform health check on new instances
          MAX_RETRIES=5
          RETRY_COUNT=0
          HEALTH_CHECK_URL="${{ secrets.NEXT_PUBLIC_PROD_URL }}/api/health"

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -s -f "$HEALTH_CHECK_URL" > /dev/null; then
              echo "Health check passed"
              break
            else
              echo "Health check failed, attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "Health check failed after $MAX_RETRIES attempts, rolling back"
                if [ ! -z "$OLD_PIDS" ]; then
                  # Restore old processes if they existed
                  pm2 reload prod-app --only "$OLD_PIDS"
                fi
                exit 1
              fi
              
              sleep 5
            fi
          done

      - name: Verify deployment
        if: success()
        run: |
          # Verify all instances are running
          RUNNING_INSTANCES=$(pm2 list | grep "prod-app" | grep "online" | wc -l)
          EXPECTED_INSTANCES=$(nproc --all)  # Number of CPU cores

          if [ "$RUNNING_INSTANCES" -lt "$EXPECTED_INSTANCES" ]; then
            echo "Error: Not all instances are running. Expected: $EXPECTED_INSTANCES, Got: $RUNNING_INSTANCES"
            exit 1
          fi

          echo "Deployment verified successfully"

      - name: Save PM2 configuration
        if: success()
        run: pm2 save

      - name: Display process status
        if: always()
        run: |
          echo "Current PM2 process list:"
          pm2 list
          echo "Detailed status of prod-app:"
          pm2 show prod-app
