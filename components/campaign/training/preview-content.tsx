import React from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import { Button } from "@/components/ui/button";
import TextField from "./preview-text-field";
import { Input } from "@/components/ui/input";
import { useUserContext } from "@/context/user-context";
import axiosInstance from "@/utils/axiosInstance";
import { useAutoGenerate } from "@/context/auto-generate-mail";
import { useParams } from "next/navigation";
import { PeopleProfileSheet } from "@/components/people-profile-sheet";
import { Lead } from "@/context/lead-user";
import { getAutogenerateTrainingEmail } from "./training.api";

interface PreviewContentProps {
  contact: Lead;
  linkedin_information: any; // Replace `any` with appropriate type if available
}

function PreviewContent({
  contact: initialContact,
  linkedin_information: initialLinkedinInformation,
}: PreviewContentProps) {
  const [newPreviews, setNewPreviews] = React.useState(false);
  const [newContact, setNewContact] = React.useState<Lead>(initialContact);
  const [newLinkedinInformation, setNewLinkedinInformation] = React.useState(
    initialLinkedinInformation
  );

  const { user } = useUserContext();
  const {
    autoGeneratedBody,
    autoGeneratedSubject,
    setAutoGeneratedBody,
    setAutoGeneratedSubject,
  } = useAutoGenerate();
  const params = useParams<{ campaignId: string }>();

  const newPreview = async () => {
    try {
      const response = await getAutogenerateTrainingEmail(
        params.campaignId,
        user.id
      );

      console.log(response.body);
      setAutoGeneratedBody(response.body);
      setAutoGeneratedSubject(response.subject);
      console.log(response);
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    }
  };

  React.useEffect(() => {
    console.log("email from preview", autoGeneratedBody, autoGeneratedSubject);
  }, [autoGeneratedBody, autoGeneratedSubject]);

  return (
    <ResizablePanelGroup direction="horizontal" className="">
      <ResizablePanel defaultSize={70}>
        <div className="flex justify-center p-6">
          <div className="flex-col w-full">
            <div className="flex justify-end">
              <Button onClick={newPreview}>New preview</Button>
            </div>
            <div className="flex mt-2 items-center">
              <Avatar className="flex h-10 w-10 items-center justify-center space-y-0 border bg-white mr-2 mt-1">
                <AvatarFallback>AV</AvatarFallback>
              </Avatar>
              <Input
                placeholder="Subject"
                className="flex-1 h-12"
                value={autoGeneratedSubject ? autoGeneratedSubject : ""}
                readOnly
              />
            </div>
            <div className="flex flex-row gap-2 mt-3">
              <TextField text={autoGeneratedBody ? autoGeneratedBody : ""} />
            </div>
          </div>
        </div>
      </ResizablePanel>
      <ResizableHandle withHandle />
      <ResizablePanel defaultSize={30}>
        <div className="flex h-full items-center">
          {newContact && (
            <PeopleProfileSheet
              data={newContact}
              companyInfoProp={newLinkedinInformation}
            />
          )}
        </div>
      </ResizablePanel>
    </ResizablePanelGroup>
  );
}

export default PreviewContent;
