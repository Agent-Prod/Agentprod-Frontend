import React, { useEffect, useState } from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useAutoGenerate } from "@/context/auto-generate-mail";
import { useParams } from "next/navigation";
import { PeopleProfileSheet } from "@/components/people-profile-sheet";
import { Textarea } from "@/components/ui/textarea";
import { useFieldsList } from "@/context/training-fields-provider";
import { LoadingCircle } from "@/app/icons";
import {
  getAutogenerateTrainingEmail,
  getPreviewByTemplate,
} from "./training.api";
import { toast } from "sonner";
import axiosInstance from "@/utils/axiosInstance";
import { useAuth } from "@/context/auth-provider";
import { Separator } from "@/components/ui/separator";
import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";

function PreviewContent() {
  const { user } = useAuth();
  const {
    autoGeneratedFollowUp,
    setAutoGeneratedFollowUp,
    setAutoGeneratedFollowUpTwo,
    autoGeneratedFollowUpTwo,
    autoGeneratedBody,
    autoGeneratedSubject,
    setAutoGeneratedBody,
    setAutoGeneratedSubject,
    contact,
    setContact,
    posts,
    setPosts,
    linkedinInformation,
    setLinkedinInformation,
    previewType,
    channel,
    linkedinMessage,
    setLinkedinMessage,
    linkedinComment,
    setLinkedinComment,
    followUps,
    setFollowUps,
    inviteMessage,
    setInviteMessage
  } = useAutoGenerate();
  const params = useParams<{ campaignId: string }>();
  const { fieldsList, body, subject } = useFieldsList();
  const [load1, setLoad1] = useState(false);
  const [load2, setLoad2] = useState(false);
  const [campaignType, setCampaignType] = useState("");
  const [loadingNewPreview, setLoadingNewPreview] = useState(false);
  const [linkedinFollowUp, setLinkedinFollowUp] = useState("");
  const [linkedinFollowUpTwo, setLinkedinFollowUpTwo] = useState("");
  const [loadLinkedinFollow1, setLoadLinkedinFollow1] = useState(false);
  const [loadLinkedinFollow2, setLoadLinkedinFollow2] = useState(false);

  useEffect(() => {
    if (!user) return;

    const fetchCampaign = async () => {
      const id = params.campaignId;
      if (!id) return;

      try {
        const response = await axiosInstance.get(`v2/campaigns/${id}`);
        if (response.status === 200) {
          setCampaignType(response.data.campaign_type);
        } else {
          toast.error("Failed to fetch campaign data");
        }
      } catch (error) {
        console.error("Error fetching campaign:", error);
        toast.error("An error occurred while fetching campaign data");
      }
    };

    fetchCampaign();
  }, [params.campaignId, user]);

  useEffect(() => {
    if (!user || previewType !== "previewFromAI") return;
    if (channel === "Linkedin" || channel === "omni") {
      fetchFollowUpData();
    }
  }, [previewType, user, channel]);

  if (!user) return null;

  const fetchFollowUpData = async () => {
    try {

      // LinkedIn follow-ups
      if (channel === "omni") {
        setLoadLinkedinFollow1(true);
        const linkedinResponse1 = await axiosInstance.post("/v2/training/autogenerate/linkedin/followup", {
          user_id: user?.id,
          follow_up_number: 1,
          campaign_id: params.campaignId,
          previous_emails: [
            {
              message: linkedinMessage,
            },
          ],
        });
        setLinkedinFollowUp(linkedinResponse1.data.message);
        setLoadLinkedinFollow1(false);

        setLoadLinkedinFollow2(true);
        const linkedinResponse2 = await axiosInstance.post("/v2/training/autogenerate/linkedin/followup", {
          user_id: user?.id,
          follow_up_number: 2,
          campaign_id: params.campaignId,
          previous_emails: [
            {
              message: linkedinMessage,
            },
            { message: linkedinResponse1.data.message },
          ],
        });
        setLinkedinFollowUpTwo(linkedinResponse2.data.message);
        setLoadLinkedinFollow2(false);
      }
    } catch (error) {
      console.error("Error making the API call:", error);
      setLoad1(false);
      setLoad2(false);
      setLoadLinkedinFollow1(false);
      setLoadLinkedinFollow2(false);
      toast.error("Failed to generate follow-up messages");
    }
  };

  const newPreview = async () => {
    setLoadingNewPreview(true);
    try {
      if (previewType === "previewFromTemplate") {
        toast.success("Regenerating preview");

        const response = await getPreviewByTemplate({
          campaign_id: params.campaignId,
          user_id: user?.id,
          template: `Subject: ${subject}\nBody: ${body}`,
          variables: fieldsList.variables,
          offering_variables: fieldsList.offering_variables,
          personalized_fields: fieldsList.personalized_fields,
          enriched_fields: fieldsList.enriched_fields,
        });
        setAutoGeneratedBody(response.email.body);
        setAutoGeneratedSubject(response.email.subject);
        setContact(response.contact);
        setLinkedinInformation(response.linkedin_information);
        setPosts(response.posts)
        setAutoGeneratedFollowUp(`${response.first_follow_up.body}`);
        setAutoGeneratedFollowUpTwo(`${response.second_follow_up.body}`);
      } else {
        toast.success("Regenerating preview");

        const response = await getAutogenerateTrainingEmail(
          params.campaignId,
          user?.id
        );

        if (channel === "omni") {
          setAutoGeneratedBody(response?.email?.body || "");
          setAutoGeneratedSubject(response?.email?.subject || "");
          setLinkedinMessage(response?.linkedin_message?.message || "");
          if (response.email.follow_up_bodies && Array.isArray(response.email.follow_up_bodies)) {
            setAutoGeneratedFollowUp(response.email.follow_up_bodies[0] || "");
            setAutoGeneratedFollowUpTwo(response.email.follow_up_bodies[1] || "");
          }
          setLinkedinComment(response?.linkedin_comment || "");
        } else if (channel === "Linkedin") {
          setAutoGeneratedSubject("");
          setLinkedinComment(response?.linkedin_comment || "");
          setAutoGeneratedBody(response.email.message);
          setFollowUps(response.email.follow_up_bodies);
          setInviteMessage(response.email.invite_message);
        } else {
          console.log(response.email)
          setAutoGeneratedBody(response.email.body);
          setAutoGeneratedSubject(response.email.subject);
          if (response.email.follow_up_bodies && Array.isArray(response.email.follow_up_bodies)) {
            setFollowUps(response.email.follow_up_bodies);
          }
        }

        setContact(response.contact);
        setLinkedinInformation(response.linkedin_information);
        setPosts(response.posts);
      }
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    } finally {
      setLoadingNewPreview(false);
    }
  };

  const FollowUpSection = ({ number, loading, content }: {
    number: number;
    loading: boolean;
    content: string;
  }) => (
    <Card className="p-4 space-y-3 border-muted">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="flex items-center justify-center w-6 h-6 rounded-full bg-secondary text-secondary-foreground text-sm font-medium">
            {number}
          </div>
          <h3 className="text-sm font-medium">
            {channel === "Linkedin" ? `Follow-up ${number}` : `Follow-up ${number}`}
          </h3>
        </div>
        {loading && <LoadingCircle />}
      </div>
      <Textarea
        className={cn(
          "min-h-[200px] text-sm leading-relaxed bg-background/50",
          channel === "Linkedin" && "focus:ring-[#0077b5]"
        )}
        placeholder={
          channel === "Linkedin"
            ? `Write your LinkedIn follow-up message ${number}...`
            : `Write your follow-up email ${number}...`
        }
        value={content || ""}
        readOnly
      />
    </Card>
  );

  const EmailHeader = () => (
    <div className="flex items-center space-x-3 mb-4">
      <Avatar className="flex-shrink-0 h-10 w-10 border-2 border-secondary">
        <AvatarFallback className="bg-secondary text-secondary-foreground">
          {user?.firstName?.[0]}
        </AvatarFallback>
      </Avatar>
      <div className="flex-1">
        <Input
          placeholder="Subject"
          className="h-12 font-medium bg-background/50"
          value={autoGeneratedSubject || ""}
          readOnly
        />
      </div>
    </div>
  );

  return (
    <ResizablePanelGroup direction="horizontal">
      <ResizablePanel defaultSize={70}>
        <div className="flex justify-center p-6">
          <div className="flex-col w-full max-w-3xl space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold">
                {channel === "Linkedin" ? "LinkedIn Preview" : "Email Preview"}
              </h2>
              <Button
                onClick={newPreview}
                className="bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors"
                disabled={loadingNewPreview}
              >
                {loadingNewPreview ? (
                  <>
                    <LoadingCircle />
                    Generating...
                  </>
                ) : (
                  "New Preview"
                )}
              </Button>
            </div>

            <Separator />

            {(channel === "mail" || channel === "omni") && (
              <>
                <Card className="p-6">
                  <EmailHeader />
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-muted-foreground">
                        Main Email Content
                      </h3>
                    </div>
                    <Textarea
                      className={cn(
                        "min-h-[300px] text-sm leading-relaxed bg-background/50",
                        "focus:ring-1 focus:ring-secondary"
                      )}
                      value={autoGeneratedBody || ""}
                      readOnly
                    />
                  </div>
                </Card>

                {campaignType !== "Nurturing" && (
                  <div className="space-y-4">
                    <h3 className="text-sm font-medium text-muted-foreground">
                      Email Follow-up Sequence
                    </h3>
                    {followUps.map((followUp: string, index: number) => (
                      <FollowUpSection
                        key={index}
                        number={index + 1}
                        loading={index === 0 ? load1 : load2}
                        content={followUp}
                      />
                    ))}
                  </div>
                )}
              </>
            )}
            {(channel === "Linkedin") && (
              <>
                <Card className="p-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-muted-foreground">
                        LinkedIn Invite Message
                      </h3>
                    </div>
                    <Textarea
                      className={cn(
                        "min-h-[150px] text-sm leading-relaxed bg-background/50",
                        "focus:ring-[#0077b5]"
                      )}
                      value={inviteMessage}
                      readOnly
                    />
                  </div>
                </Card>
              </>
            )}

            {(channel === "Linkedin" || channel === "omni") && (
              <>
                <Card className="p-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-muted-foreground">
                        LinkedIn Message
                      </h3>
                    </div>
                    <Textarea
                      className={cn(
                        "min-h-[300px] text-sm leading-relaxed bg-background/50",
                        "focus:ring-[#0077b5]"
                      )}
                      value={channel === "omni" ? (linkedinMessage || "") : (autoGeneratedBody || "")}
                      readOnly
                    />
                  </div>
                </Card>

                {campaignType !== "Nurturing" && (
                  <div className="space-y-4">
                    <h3 className="text-sm font-medium text-muted-foreground">
                      LinkedIn Follow-up Sequence
                    </h3>
                    {followUps.map((followUp: string, index: number) => (
                      <FollowUpSection
                        key={index}
                        number={index + 1}
                        loading={index === 0 ? load1 : load2}
                        content={followUp}
                      />
                    ))}
                  </div>
                )}
              </>
            )}

            

            {(channel === "Linkedin" || channel === "omni") && (
              <>
                <Card className="p-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-muted-foreground">
                        LinkedIn Comment
                      </h3>
                    </div>
                    <Textarea
                      className={cn(
                        "min-h-[150px] text-sm leading-relaxed bg-background/50",
                        "focus:ring-[#0077b5]"
                      )}
                      value={linkedinComment}
                      readOnly
                    />
                  </div>
                </Card>
              </>
            )}
          </div>
        </div>
      </ResizablePanel>

      <ResizableHandle withHandle className="bg-muted" />

      <ResizablePanel defaultSize={30}>
        <Card className="h-full rounded-none border-0 border-l">
          {contact && linkedinInformation && (
            <PeopleProfileSheet
              data={contact}
              companyInfoProp={linkedinInformation}
              {...(Array.isArray(posts) && posts.length > 0 ? { posts } : {})}
            />
          )}
        </Card>
      </ResizablePanel>
    </ResizablePanelGroup>
  );
}

export default PreviewContent;
