/* eslint-disable import/no-unresolved */
/* eslint-disable no-console */

"use client";
import React, { useEffect, useState } from "react";
import { Pencil, Eye } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import EditorContent from "./editor-content";
import PreviewContent from "./preview-content";
import {
  getAutogenerateTrainingEmail,
  startCampaign,
  getPreviewByTemplate,
  createTraining,
  TrainingRequest,
  updateTraining,
} from "./training.api";
import { useUserContext } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { useParams } from "next/navigation";
import { useAutoGenerate } from "@/context/auto-generate-mail";
import { useFieldsList } from "@/context/training-fields-provider";
import AutoAwesomeIcon from "@mui/icons-material/AutoAwesome";
import { LoadingCircle } from "@/app/icons";
import { FieldType, VariableType } from "./types";
import { toast } from "sonner";

export interface PreviewData {
  email: {
    subject: string;
    body: string;
  };
  contact?: any;
  linkedin_information?: string;
}

interface Lead {
  firstName: string;
  email: string;
  position: string;
  companyName: string;
  phone: string;
  linkedinUrl: string;
  industry: string;
  companySize: string;
  headquarters: string;
  foundedYear: string;
  specialties: string[];
}

export default function Training() {
  const [activeTab, setActiveTab] = React.useState("editor");
  const [previewData, setPreviewData] = React.useState<PreviewData | null>(
    null
  );
  const [previewLoading, setPreviewLoading] = useState(false);
  const { user } = useUserContext();
  const params = useParams<{ campaignId: string }>();
  const {
    setAutoGeneratedBody,
    setAutoGeneratedSubject,
    setContact,
    setLinkedinInformation,
    setPreviewType,
    previewType,
  } = useAutoGenerate();
  const { fieldsList, body, subject, followUp, subjectOptions } =
    useFieldsList();
  const router = useRouter();
  const [startCampaignIsLoading, setStartCampaignIsLoading] =
    React.useState(false);

  // const handleGenerateWithAI = async () => {
  //   try {
  //     const response = await getAutogenerateTrainingEmail(
  //       params.campaignId,
  //       user.id
  //     );
  //     console.log(response);
  //     const { email, contact, linkedin_information } = response;

  //     setPreviewData({
  //       email,
  //       contact,
  //       linkedin_information,
  //     });
  //     setActiveTab("preview");
  //   } catch (error) {
  //     console.error("Failed to fetch training data:", error);
  //   }
  // };

  const handleStartCampaign = async () => {
    setStartCampaignIsLoading(true);
    const userId = user.id as string;

    try {
      toast.success(
        "Your drafts are getting created, it might take some time."
      );
      if (previewType == "previewFromTemplate") {
        const response = await startCampaign(
          params.campaignId,
          userId,
          "False"
        );

        console.log("trainingResponse", response);
      } else if (previewType == "previewFromAI") {
        const response = await startCampaign(params.campaignId, userId, "True");
        console.log("trainingResponse", response);
      }

      setStartCampaignIsLoading(false);
      router.push("/dashboard/mail");
    } catch (error: any) {
      console.log("TrainingResponse", error);
      toast.error(error.message);
      setStartCampaignIsLoading(false);
    }
  };

  const handleCustomGenerate = async () => {
    setPreviewLoading(true);
    const toastMessages = [
      {
        title: "Enriching data for your variables...1",
        description: "Our AI is understanding your template variables and learning your tone",
      },
      {
        title: "Understanding your audience and offering...",
        description:
          "Our AI is understanding your audience and offering to generate relevant messages",
      },
      {
        title: "Training AI on your messaging and tone...",
        description:
          "Your previous revisions are being used to train AI to write in your voice ",
      },
      {
        title: "Generating a preview for your message...",
        description:
          "We're generating a preview for your message to make sure everyting looks good",
      },
    ];

    let toastIndex = 0;
    const intervalId = setInterval(() => {
      if (toastIndex < toastMessages.length) {
        toast.dismiss(); // Remove previous toasts
        toast.loading(
          <div className="flex items-center h-full">
            <div>
              <LoadingCircle />
            </div>
            <div className="ml-2">
              <strong>{toastMessages[toastIndex].title}</strong>
              <p>{toastMessages[toastIndex].description}</p>
            </div>
          </div>
        );
        toastIndex++;
      } else {
        clearInterval(intervalId);
      }
    }, 2000);

    try {
      const trainingBody = {
        campaign_id: params.campaignId,
        template: `Subject: ${subject}
        
        ${body}
        `,
        follow_up_template: followUp,
        variables: fieldsList.variables.reduce<Record<string, string>>(
          (acc, field) => {
            acc[field.id] = field.value;
            return acc;
          },
          {}
        ),
        offering_variables: fieldsList.offering_variables.reduce<
          Record<string, string>
        >((acc, field) => {
          acc[field.fieldName] = field.description;
          return acc;
        }, {}),
        personalized_fields: fieldsList.personalized_fields.reduce<
          Record<string, string>
        >((acc, field) => {
          acc[field.fieldName] = field.description;
          return acc;
        }, {}),
        enriched_fields: fieldsList.enriched_fields.map(
          (field) => field.fieldName
        ),
        subject_field_options: subjectOptions,
      };

      await createTraining(trainingBody as TrainingRequest);
      // await updateTraining(user.id, trainingBody);

      const response = await getPreviewByTemplate({
        campaign_id: params.campaignId,
        user_id: user.id,
        template: `Subject: ${subject}
        Body: ${body}`,
        variables: fieldsList.variables,
        offering_variables: fieldsList.offering_variables,
        personalized_fields: fieldsList.personalized_fields,
        enriched_fields: fieldsList.enriched_fields,
      });
      console.log("debugger   " + response.template);

      setPreviewData({
        email: {
          body: response.body,
          subject: response.subject,
        },
      });

      console.log("response from get email by template", response);

      setAutoGeneratedBody(response.email.body);
      setAutoGeneratedSubject(response.email.subject);
      setContact(response.contact);
      setLinkedinInformation(response.linkedin_information);
      setPreviewType("previewFromTemplate");

      toast.dismiss(); // Remove any remaining loading toasts
      toast.success("Email auto-generation complete.");
    } catch (error) {
      console.error("Failed to fetch training data:", error);
      toast.dismiss(); // Remove any remaining loading toasts
      toast.error("Failed to fetch training data.");
      setPreviewLoading(false);
    } finally {
      clearInterval(intervalId);
      setActiveTab("preview");
      setPreviewLoading(false);
    }
  };

  const handleLetAiWrite = async () => {
    toast.success("AI is writing your email, it might take some time.");
    try {
      const response = await getAutogenerateTrainingEmail(
        params.campaignId,
        user.id
      );
      setPreviewData({
        email: {
          body: response.body,
          subject: response.subject,
        },
      });
      console.log(response.body);
      setAutoGeneratedBody(response.email.body);
      setAutoGeneratedSubject(response.email.subject);
      setContact(response.contact);
      setLinkedinInformation(response.linkedin_information);
      setPreviewType("previewFromAI");
      console.log("response from training page", response);
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    } finally {
      setActiveTab("preview");
    }
  };

  const onTabChange = (tab: string) => {
    setActiveTab("editor");
  };

  return (
    <>
      <div className="w-full h-14 px-4 flex flex-row justify-between items-center rounded-lg border">
        <div className="ml-4">Training</div>
        <div className="flex items-center flex-row">
          <Tabs
            value={activeTab}
            onValueChange={onTabChange}
            className="w-[200px]"
          >
            <TabsList>
              <TabsTrigger value="editor" className="flex gap-1">
                <Pencil className="h-3 w-3" />
                Editor
              </TabsTrigger>
              <TabsTrigger
                value="preview"
                className="flex gap-1"
                onClick={handleCustomGenerate}
              >
                {previewLoading ? (
                  <div className="flex items-center">
                    <LoadingCircle />
                    <span className="ml-2">Preview</span>
                  </div>
                ) : (
                  <div className="flex items-center">
                    <Eye className="h-3 w-3 mr-2" />
                    Preview
                  </div>
                )}
              </TabsTrigger>
            </TabsList>
          </Tabs>
          {startCampaignIsLoading ? (
            <LoadingCircle />
          ) : (
            <Button onClick={handleStartCampaign}>Start campaign</Button>
          )}
        </div>
      </div>
      {activeTab === "editor" ? (
        <div>
          <div
            className="mx-16 mt-3 hover:underline cursor-pointer"
            onClick={handleLetAiWrite}
          >
            Let AI write email on its own <AutoAwesomeIcon />
          </div>
          <EditorContent />
        </div>
      ) : (
        <PreviewContent />
      )}
    </>
  );
}
