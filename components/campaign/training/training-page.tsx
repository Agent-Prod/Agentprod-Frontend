/* eslint-disable import/no-unresolved */
/* eslint-disable no-console */

"use client";
import React, { useEffect } from "react";
import { Pencil, Eye } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import EditorContent from "./editor-content";
import PreviewContent from "./preview-content";
import {
  getAutogenerateTrainingEmail,
  startCampaign,
  getPreviewByTemplate,
} from "./training.api";
import { useUserContext } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { useParams } from "next/navigation";
import { useAutoGenerate } from "@/context/auto-generate-mail";
import { useFieldsList } from "@/context/training-fields-provider";
import AutoAwesomeIcon from "@mui/icons-material/AutoAwesome";

export interface PreviewData {
  email: {
    subject: string;
    body: string;
  };
  contact?: any;
  linkedin_information?: string;
}

interface Lead {
  firstName: string;
  email: string;
  position: string;
  companyName: string;
  phone: string;
  linkedinUrl: string;
  industry: string;
  companySize: string;
  headquarters: string;
  foundedYear: string;
  specialties: string[];
}

export default function Training() {
  const [activeTab, setActiveTab] = React.useState("editor");
  const [previewData, setPreviewData] = React.useState<PreviewData | null>(
    null
  );
  const { user } = useUserContext();
  const params = useParams<{ campaignId: string }>();
  const {
    setAutoGeneratedBody,
    setAutoGeneratedSubject,
    setContact,
    setLinkedinInformation,
    setPreviewType,
  } = useAutoGenerate();
  const { fieldsList, body, subject } = useFieldsList();
  const router = useRouter();

  const handleGenerateWithAI = async () => {
    try {
      const response = await getAutogenerateTrainingEmail(
        params.campaignId,
        user.id
      );
      console.log(response);
      const { email, contact, linkedin_information } = response;

      setPreviewData({
        email,
        contact,
        linkedin_information,
      });
      setActiveTab("preview");
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    }
  };

  const handleStartCampaign = async () => {
    const userId = user.id as string;

    try {
      const response = await startCampaign(params.campaignId, userId);
      console.log("trainingResponse", response);
      router.push("/dashboard/mail");
    } catch (error: any) {
      console.log("TrainingResponse", error);
    }
  };

  const handleCustomGenerate = async () => {
    try {
      const response = await getPreviewByTemplate({
        campaign_id: params.campaignId,
        user_id: user.id,
        template: `Subject: ${subject}
        Body: ${body}`,
        variables: fieldsList.variables,
        offering_variables: fieldsList.offering_variables,
        personalized_fields: fieldsList.personalized_fields,
        enriched_fields: fieldsList.enriched_fields,
      });
      setPreviewData({
        email: {
          body: response.body,
          subject: response.subject,
        },
      });
      console.log("response from get email by template", response);
      setAutoGeneratedBody(response.email.body);
      setAutoGeneratedSubject(response.email.subject);
      setContact(response.contact);
      setLinkedinInformation(response.linkedin_information);
      setPreviewType("previewFromTemplate");
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    } finally {
      setActiveTab("preview");
    }
  };

  const handleLetAiWrite = async () => {
    try {
      const response = await getAutogenerateTrainingEmail(
        params.campaignId,
        user.id
      );
      setPreviewData({
        email: {
          body: response.body,
          subject: response.subject,
        },
      });
      console.log(response.body);
      setAutoGeneratedBody(response.email.body);
      setAutoGeneratedSubject(response.email.subject);
      setContact(response.contact);
      setLinkedinInformation(response.linkedin_information);
      setPreviewType("previewFromAI");
      console.log("response from training page", response);
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    } finally {
      setActiveTab("preview");
    }
  };

  const onTabChange = (tab: string) => {
    setActiveTab(tab);
  };

  return (
    <>
      <div className="w-full h-14 px-4 flex flex-row justify-between items-center rounded-lg border">
        <div className="ml-4">Training</div>
        <div className="flex items-center flex-row">
          <Tabs
            value={activeTab}
            onValueChange={onTabChange}
            className="w-[200px]"
          >
            <TabsList>
              <TabsTrigger value="editor" className="flex gap-1">
                <Pencil className="h-3 w-3" />
                Editor
              </TabsTrigger>
              <TabsTrigger
                value="preview"
                className="flex gap-1"
                onClick={handleCustomGenerate}
              >
                <Eye className="h-3 w-3" />
                Preview
              </TabsTrigger>
            </TabsList>
          </Tabs>
          <Button onClick={handleStartCampaign}>Start campaign</Button>
        </div>
      </div>
      {activeTab === "editor" ? (
        <div>
          <div
            className="mx-16 mt-3 hover:underline cursor-pointer"
            onClick={handleLetAiWrite}
          >
            Let AI write email on its own <AutoAwesomeIcon />
          </div>
          <EditorContent />
        </div>
      ) : (
        <PreviewContent />
      )}
    </>
  );
}
