/* eslint-disable import/no-unresolved */
/* eslint-disable no-console */

"use client";
import React, { useEffect, useState } from "react";
import { Pencil, Eye, PlayCircle, Send, Rocket, Wand2, FileEdit } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import EditorContent from "./editor-content";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import PreviewContent from "./preview-content";
import {
  getAutogenerateTrainingEmail,
  startCampaign,
  getPreviewByTemplate,
  createTraining,
  TrainingRequest,
} from "./training.api";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

import { useRouter } from "next/navigation";
import { useParams } from "next/navigation";
import { useAutoGenerate } from "@/context/auto-generate-mail";
import { useFieldsList } from "@/context/training-fields-provider";
import AutoAwesomeIcon from "@mui/icons-material/AutoAwesome";
import { LoadingCircle } from "@/app/icons";
import { toast } from "sonner";
import { Textarea } from "@/components/ui/textarea";
import axiosInstance from "@/utils/axiosInstance";
import { useAuth } from "@/context/auth-provider";

export interface PreviewData {
  email: {
    subject: string;
    body: string;
  };
  contact?: any;
  linkedin_information?: string;
  posts?: string[]
}


export default function Training() {
  const [loadingWriteAI, setLoadingWriteAI] = React.useState(false);
  const [activeTab, setActiveTab] = React.useState("editor");
  const [previewLoading, setPreviewLoading] = useState(false);
  const [testEmail, setTestEmail] = useState("");
  const [testCamp, setTestCamp] = useState<any[]>([]);
  const [testCampLoading, setTestCampLoading] = useState(false);
  const [selectedOption, setSelectedOption] = useState<number>(80);
  const [customPrompt, setCustomPrompt] = useState('');
  const [startCampaignIsLoading, setStartCampaignIsLoading] = React.useState(false);
  const [customEmail, setCustomEmail] = useState<string>("");
  const [testLoading, setTestLoading] = useState(false);

  const { user } = useAuth();
  const params = useParams<{ campaignId: string }>();
  const router = useRouter();

  const {
    setAutoGeneratedFollowUp,
    setAutoGeneratedFollowUpTwo,
    setAutoGeneratedBody,
    setAutoGeneratedSubject,
    setContact,
    setLinkedinInformation,
    setPreviewType,
    setPosts,
    previewType,
    autoGeneratedSubject,
    autoGeneratedBody,
    channel,
    setChannel,
  } = useAutoGenerate();

  const { fieldsList, body, subject, followUp, followUpOne, subjectOptions } = useFieldsList();

  useEffect(() => {
    if (!user) return;
    const fetchCustomInstructions = async () => {
      try {
        const response = await axiosInstance.get(
          `v2/personas/custom_instructions/${params.campaignId}`
        );

        if (response.data) {
          setSelectedOption(parseInt(response.data.length_of_email));
          setCustomPrompt(response.data.custom_instructions?.[0] || '');
        }
      } catch (error) {
        console.error('Error fetching custom instructions:', error);
      }
    };

    fetchCustomInstructions();
  }, [params.campaignId, user]);

  useEffect(() => {
    if (!user) return;
    async function call() {
      const res = await axiosInstance.get(`v2/goals/${params.campaignId}`);
      setTestEmail(res.data.emails);
    }

    call();
  }, [params.campaignId, user]);

  useEffect(() => {
    if (!user) return;
    const fetchCampaign = async () => {
      try {
        const response = await axiosInstance.get(`v2/campaigns/${params.campaignId}`);
        if (response.status === 200) {
          setChannel(response.data.channel);
        } else {
          toast.error("Failed to fetch campaign data");
        }
      } catch (error) {
        console.error("Error fetching campaign:", error);
        toast.error("An error occurred while fetching campaign data");
      }
    };

    fetchCampaign();
  }, [params.campaignId, user]);

  if (!user) return null;

  const handleStartCampaign = async () => {
    setStartCampaignIsLoading(true);
    const userId = user.id as string;

    try {
      const checkReck = await axiosInstance.get(
        `v2/recurring_campaign_request/${params.campaignId}`
      );

      if (checkReck.data !== null) {
        if (checkReck.data.is_active === false) {
          await axiosInstance.put(
            `v2/recurring_campaign_request`,
            {
              campaign_id: params.campaignId,
              is_active: true,
            }
          );
        }

      }
      toast.success(
        "Your drafts are getting created, it might take some time."
      );

      // Start the campaign in the background without awaiting
      if (previewType == "previewFromTemplate") {
        startCampaign(params.campaignId, userId, false)
          .then((response) => console.log("trainingResponse", response))
          .catch((error) => console.error("Error starting campaign:", error));
      } else if (previewType == "previewFromAI") {
        startCampaign(params.campaignId, userId, true)
          .then((response) => console.log("trainingResponse", response))
          .catch((error) => console.error("Error starting campaign:", error));
      }

      localStorage.setItem("newCampaignId", params.campaignId);
      localStorage.setItem("redirectFromCampaign", "true");
      localStorage.setItem("campaignDraftStatus", "pending");

      // Set a timeout to redirect after 20 seconds
      setTimeout(() => {
        setStartCampaignIsLoading(false);
        router.push("/mail");
      }, 30000);
    } catch (error: any) {
      console.log("TrainingResponse", error);
      toast.error(error.message);
      setStartCampaignIsLoading(false);
    }
  };

  const handleCustomGenerate = async () => {
    setPreviewLoading(true);
    const toastMessages = [
      {
        title: "Enriching data for your variables...",
        description:
          "Our AI is understanding your template variables and learning your tone",
      },
      {
        title: "Understanding your audience and offering...",
        description:
          "Our AI is understanding your audience and offering to generate relevant messages",
      },
      {
        title: "Training AI on your messaging and tone...",
        description:
          "Your previous revisions are being used to train AI to write in your voice ",
      },
      {
        title: "Generating a preview for your message...",
        description:
          "We're generating a preview for your message to make sure everyting looks good",
      },
    ];

    let toastIndex = 0;
    const intervalId = setInterval(() => {
      if (toastIndex < toastMessages.length) {
        toast.dismiss(); // Remove previous toasts
        toast.loading(
          <div className="flex items-center h-full">
            <div>
              <LoadingCircle />
            </div>
            <div className="ml-2">
              <strong>{toastMessages[toastIndex].title}</strong>
              <p>{toastMessages[toastIndex].description}</p>
            </div>
          </div>
        );
        toastIndex++;
      } else {
        clearInterval(intervalId);
      }
    }, 2000);

    try {
      setPreviewType("previewFromTemplate");

      const trainingBody = {
        campaign_id: params.campaignId,
        template: subject?.length > 0 && body?.length > 0 ? `Subject: ${subject}
        ${body}
        ` : null,
        follow_up_template_1: { body: followUp },
        follow_up_template_2: { body: followUpOne },

        variables: fieldsList.variables.reduce<Record<string, string>>(
          (acc, field) => {
            acc[field.id] = field.value;
            return acc;
          },
          {}
        ),
        offering_variables: fieldsList.offering_variables.reduce<
          Record<string, string>
        >((acc, field) => {
          acc[field.fieldName] = field.description;
          return acc;
        }, {}),
        personalized_fields: fieldsList.personalized_fields.reduce<
          Record<string, string>
        >((acc, field) => {
          acc[field.fieldName] = field.description;
          return acc;
        }, {}),
        enriched_fields: fieldsList.enriched_fields.map(
          (field) => field.fieldName
        ),
        subject_field_options: subjectOptions,
      };

      await createTraining(trainingBody as TrainingRequest);
      // await updateTraining(user.id, trainingBody);

      const response = await getPreviewByTemplate({
        campaign_id: params.campaignId,
        user_id: user.id,
        template: `
        Body: ${body}`,
        variables: fieldsList.variables,
        offering_variables: fieldsList.offering_variables,
        personalized_fields: fieldsList.personalized_fields,
        enriched_fields: fieldsList.enriched_fields,
      });
      console.log("debugger   " + response.template);

      console.log("response from get email by template", response);

      setAutoGeneratedBody(response.email.body);
      setAutoGeneratedSubject(response.email.subject);
      setContact(response.contact);
      setLinkedinInformation(response.linkedin_information);
      setPosts(response.posts)
      setAutoGeneratedFollowUp(`${response.first_follow_up.body}`);
      setAutoGeneratedFollowUpTwo(`${response.second_follow_up.body}`);

      toast.dismiss(); // Remove any remaining loading toasts
      toast.success("Email auto-generation complete.");
    } catch (error) {
      console.error("Failed to fetch training data:", error);
      toast.dismiss(); // Remove any remaining loading toasts
      setPreviewLoading(false);
    } finally {
      clearInterval(intervalId);
      setActiveTab("preview");
      setPreviewLoading(false);
    }
  };

  const handleLetAiWrite = async () => {
    setLoadingWriteAI(true);
    toast.success("AI is writing your email, it might take some time.");
    try {

      const response = await getAutogenerateTrainingEmail(
        params.campaignId,
        user.id
      );
      console.log(response.body);
      console.log("Main Gen");
      if (channel !== "Linkedin") {
        setAutoGeneratedBody(response.email.body); // Fixed this line
        setAutoGeneratedSubject(response.email.subject); // Fixed this line
      } else {
        setAutoGeneratedSubject("");
        setAutoGeneratedBody(response.email.message);
      }
      setContact(response.contact);
      setLinkedinInformation(response.linkedin_information);
      setPosts(response.posts)
      setPreviewType("previewFromAI");
      setActiveTab("preview");

      console.log("response from training page", response);
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    } finally {
      setLoadingWriteAI(false);
    }
  };

  const onTabChange = (tab: string) => {
    setActiveTab("editor");
  };

  const handleGenerate = async () => {
    try {
      const customInstructions = [];
      if (customPrompt) {
        customInstructions.push(customPrompt);
      }

      const personaData = {
        user_id: user.id,
        campaign_id: params.campaignId,
        custom_instructions: customInstructions,
        length_of_email: selectedOption,
      };

      const res = await axiosInstance.put(
        `v2/personas/campaign`,
        personaData
      );

      console.log("Persona update response:", res.data);
      await handleLetAiWrite();
    } catch (error) {
      console.error("Error updating persona:", error);
      toast.error("Failed to update persona information");
    }
  };

  const handleTemplatePreview = async () => {
    handleCustomGenerate();
  };

  const handleSendTestEmail = async () => {
    try {

      setTestLoading(true);
      const response = await axiosInstance.post(
        `v2/google/test-brevo-email`,
        {
          sender_email: testEmail[0], // assuming user.email exists
          test_recipient: customEmail,
          subject: autoGeneratedSubject || "Test email",
          body: autoGeneratedBody || "Testing"
        }
      );

      if (response.data.message === "Test email sent successfully") {
        // Create a new entry for the table with the test results
        const newTestResult = [{
          seed_mail: customEmail,
          receivedAt: "-",
          spam_score: "Sent", // You might want to adjust this based on actual response
          sender: testEmail
        }];

        setTestCamp(prevTestCamp => [...prevTestCamp, ...newTestResult]);
        toast.success("Test email sent successfully");
      }
      setCustomEmail("");
    } catch (error) {
      console.error("Error sending test email:", error);
      toast.error("Failed to send test email");
    } finally {
      setTestLoading(false);
    }
  };

  const handleTestCampaign = async () => {
    toast.loading("Testing campaign...");
    setTestCampLoading(true);
    try {
      const res = await axiosInstance.post(
        `v2/google/test-mail`,
        {
          user_id: user.id,
          subject: autoGeneratedSubject || "Test mail",
          body: autoGeneratedBody || "Hi",
          email: testEmail,
        }
      );
      setTestCamp(res.data[0]);
      toast.success("Testing campaign complete");
    } catch (error) {
      toast.error("Failed to test campaign");
    } finally {
      setTestCampLoading(false);
    }
  }

  return (
    <>
      <div className="w-full px-6 py-4 mb-6 flex flex-row justify-between items-center rounded-xl border bg-gradient-to-r from-background to-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60 shadow-sm">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-lg bg-primary/10">
            <Pencil className="h-5 w-5 text-primary" />
          </div>
          <div>
            <h1 className="text-xl font-semibold">Training</h1>
            <p className="text-sm text-muted-foreground">
              Configure and preview your campaign messages
            </p>
          </div>
        </div>

        <div className="flex items-center gap-4">
          <Tabs
            value={activeTab}
            onValueChange={onTabChange}
            className="w-[220px]"
          >
            <TabsList className="grid w-full grid-cols-2 p-1">
              <TabsTrigger value="editor" className="flex gap-2 px-4 py-2 rounded-lg data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
                <Pencil className="h-4 w-4" />
                Editor
              </TabsTrigger>
              <TabsTrigger value="preview" className="flex gap-2 px-4 py-2 rounded-lg data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
                {previewLoading ? <LoadingCircle /> : <Eye className="h-4 w-4" />}
                Preview
              </TabsTrigger>
            </TabsList>
          </Tabs>

          {startCampaignIsLoading ? (
            <Button disabled variant="outline" className="min-w-[140px]">
              <LoadingCircle />
              <span className="ml-2">Starting...</span>
            </Button>
          ) : channel === "Linkedin" ? (
            <Button
              onClick={handleStartCampaign}
              className="bg-primary hover:bg-primary/90 min-w-[140px]"
            >
              Start Campaign
            </Button>
          ) : (
            <Dialog>
              <DialogTrigger asChild>
                <Button
                  variant="outline"
                  onClick={handleTestCampaign}
                  disabled={testCampLoading}
                  className="min-w-[140px]"
                >
                  {testCampLoading ? (
                    <>
                      <LoadingCircle />
                      <span className="ml-2">Testing...</span>
                    </>
                  ) : (
                    <>
                      <PlayCircle className="mr-2 h-4 w-4" />
                      Test Campaign
                    </>
                  )}
                </Button>
              </DialogTrigger>

              <DialogContent className="max-w-4xl">
                <DialogHeader className="space-y-3 pb-6">
                  <DialogTitle className="text-2xl font-semibold">
                    Test Campaign Results
                  </DialogTitle>
                  <DialogDescription className="text-base text-muted-foreground">
                    Review the delivery status and spam scores before starting your campaign
                  </DialogDescription>
                </DialogHeader>

                <div className="h-[400px] overflow-y-auto rounded-xl border bg-muted/30">
                  <Table>
                    <TableHeader>
                      <TableRow className="hover:bg-transparent">
                        <TableHead className="font-semibold">Email Address</TableHead>
                        <TableHead className="font-semibold">Placement</TableHead>
                        <TableHead className="font-semibold">Status</TableHead>
                        <TableHead className="font-semibold">Sender</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {testCamp.map((data: any, index: number) => (
                        <TableRow key={index} className="hover:bg-muted/50">
                          <TableCell className="font-medium">{data.seed_mail}</TableCell>
                          <TableCell>{data.receivedAt}</TableCell>
                          <TableCell>
                            <span className="inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium bg-green-50 text-green-700 border border-green-200">
                              {data.spam_score}
                            </span>
                          </TableCell>
                          <TableCell>{data.sender}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>

                <div className="flex items-center justify-between gap-6 mt-6">
                  <div className="flex items-center gap-3 flex-1">
                    <Input
                      placeholder="Enter test email address"
                      type="email"
                      value={customEmail}
                      onChange={(e) => setCustomEmail(e.target.value)}
                      className="max-w-md"
                    />
                    <Button
                      onClick={handleSendTestEmail}
                      disabled={testLoading || !customEmail}
                      variant="outline"
                    >
                      {testLoading ? (
                        <>
                          <LoadingCircle />
                          <span className="ml-2">Sending...</span>
                        </>
                      ) : (
                        <>
                          <Send className="mr-2 h-4 w-4" />
                          Send Test
                        </>
                      )}
                    </Button>
                  </div>
                  <Button
                    onClick={handleStartCampaign}
                    className="bg-primary hover:bg-primary/90 min-w-[140px]"
                  >
                    <Rocket className="mr-2 h-4 w-4" />
                    Start Campaign
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          )}
        </div>
      </div>
      {activeTab === "editor" ? (
        <div className="space-y-8 px-1">
          <Card className="w-full rounded-xl border-muted/60 shadow-sm hover:shadow-md transition-shadow duration-200">
            <CardHeader className="pb-2 border-b space-y-1">
              <CardTitle className="flex items-center justify-center gap-3 text-xl font-semibold">
                <div className="p-1 rounded-lg bg-primary/10">
                  <AutoAwesomeIcon className="h-2 w-2 text-primary" />
                </div>
                Let AI Write
              </CardTitle>
              <p className="text-sm text-center text-muted-foreground">
                Let our AI assistant generate personalized messages for your campaign
              </p>
            </CardHeader>
            <CardContent className="pt-8">
              <div className="max-w-2xl space-y-8">
                <div className="space-y-6">
                  <div className="space-y-4">
                    <Label className="text-base font-medium">Message Length</Label>
                    <RadioGroup
                      defaultValue="80"
                      className="flex gap-8 w-full space-x-4"
                      onValueChange={(value) => setSelectedOption(parseInt(value))}
                    >
                      {[
                        { label: 'Short', value: 50, description: '~50 words' },
                        { label: 'Medium', value: 80, description: '~80 words' },
                        { label: 'Long', value: 120, description: '~120 words' }
                      ].map((option) => (
                        <div key={option.label} className="flex items-center space-x-2">
                          <RadioGroupItem
                            value={option.value.toString()}
                            id={option.label}
                            className="w-4 h-4"
                          />
                          <div className="grid">
                            <Label
                              htmlFor={option.label}
                              className="text-sm font-medium leading-none cursor-pointer"
                            >
                              {option.label}
                            </Label>
                            <p className="text-xs text-muted-foreground">
                              {option.description}
                            </p>
                          </div>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="custom-instructions" className="text-base font-medium">
                      Custom Instructions (Optional)
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Add specific instructions to guide the AI in generating your message
                    </p>
                    <Textarea
                      id="custom-instructions"
                      placeholder="E.g., Use a professional tone, focus on benefits, include a clear call to action..."
                      value={customPrompt}
                      onChange={(e) => setCustomPrompt(e.target.value)}
                      className="min-h-[120px] resize-none"
                    />
                  </div>
                </div>

                <Button
                  onClick={handleGenerate}
                  className="w-1/2 bg-primary hover:bg-primary/90"
                  disabled={loadingWriteAI}
                  size="lg"
                >
                  {loadingWriteAI ? (
                    <>
                      <LoadingCircle />
                      <span className="ml-2">Generating Preview...</span>
                    </>
                  ) : (
                    <>
                      Generate Preview
                      <Wand2 className="ml-2 h-4 w-4" />
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="w-full rounded-xl border-muted/60 shadow-sm hover:shadow-md transition-shadow duration-200">
            <CardHeader className="space-y-1">
              <CardTitle className="flex items-center justify-center gap-3 text-xl font-semibold">
                <div className="p-2 rounded-lg bg-primary/10">
                  <FileEdit className="h-5 w-5 text-primary" />
                </div>
                Give Your Script
              </CardTitle>
              <p className="text-sm text-center text-muted-foreground">
                Write and customize your own campaign message
              </p>
            </CardHeader>
            <CardContent className="pt-6">
              <EditorContent />
              <Button
                onClick={handleTemplatePreview}
                className="w-1/4 mt-6 flex justify-center"
                disabled={previewLoading}
                size="lg"
              >
                {previewLoading ? (
                  <>
                    <LoadingCircle />
                    <span className="ml-2">Generating Preview...</span>
                  </>
                ) : (
                  <>
                    Generate Preview
                    <Eye className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>
      ) : (
        <PreviewContent />
      )}
    </>
  );
}
